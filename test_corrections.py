#!/usr/bin/env python3
"""
Teste das corre√ß√µes implementadas no CardioAI Pro
"""

import sys
import os
import numpy as np
from pathlib import Path
import tempfile
from PIL import Image
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_imports():
    """Testa se todas as importa√ß√µes est√£o funcionando."""
    print("üîç Testando importa√ß√µes...")
    
    try:
        # Testar importa√ß√£o do digitalizador h√≠brido
        from hybrid_ecg_digitizer import HybridECGDigitizer
        print("‚úÖ HybridECGDigitizer importado com sucesso")
        
        # Testar importa√ß√£o dos servi√ßos
        sys.path.append('backend/app')
        from services.unified_ecg_service import get_ecg_service
        from services.unified_model_service import get_model_service
        print("‚úÖ Servi√ßos unificados importados com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {str(e)}")
        return False

def test_digitizer():
    """Testa o digitalizador h√≠brido."""
    print("\nüîç Testando digitalizador h√≠brido...")
    
    try:
        from hybrid_ecg_digitizer import HybridECGDigitizer
        
        # Criar imagem de teste
        test_image = np.random.randint(0, 255, (600, 800, 3), dtype=np.uint8)
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
            Image.fromarray(test_image).save(tmp_file.name)
            
            # Inicializar digitalizador
            digitizer = HybridECGDigitizer(target_length=1000, verbose=False)
            
            # Testar digitaliza√ß√£o
            result = digitizer.digitize(tmp_file.name)
            
            print(f"‚úÖ Digitaliza√ß√£o conclu√≠da:")
            print(f"   - M√©todo: {result.get('method', 'N/A')}")
            print(f"   - Shape dos dados: {result['data'].shape}")
            print(f"   - Qualidade: {result.get('quality', {}).get('overall_score', 'N/A')}")
            
            # Limpar arquivo tempor√°rio
            os.unlink(tmp_file.name)
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no digitalizador: {str(e)}")
        return False

def test_unified_ecg_service():
    """Testa o servi√ßo unificado de ECG."""
    print("\nüîç Testando UnifiedECGService...")
    
    try:
        sys.path.append('backend/app')
        from services.unified_ecg_service import get_ecg_service
        
        # Obter servi√ßo
        ecg_service = get_ecg_service()
        
        # Verificar se m√©todo process_ecg_image existe
        if hasattr(ecg_service, 'process_ecg_image'):
            print("‚úÖ M√©todo process_ecg_image encontrado")
            
            # Criar imagem de teste
            test_image = np.random.randint(0, 255, (600, 800, 3), dtype=np.uint8)
            
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                Image.fromarray(test_image).save(tmp_file.name)
                
                # Testar processamento
                result = ecg_service.process_ecg_image(
                    image_path=tmp_file.name,
                    patient_id="TEST_001",
                    quality_threshold=0.1  # Baixo para aceitar dados sint√©ticos
                )
                
                print(f"‚úÖ Processamento de imagem conclu√≠do:")
                print(f"   - Process ID: {result.get('process_id', 'N/A')}")
                print(f"   - Digitaliza√ß√£o real: {result.get('digitization', {}).get('real_digitization', 'N/A')}")
                print(f"   - M√©todo: {result.get('digitization', {}).get('method', 'N/A')}")
                print(f"   - Shape dos dados: {result.get('data', {}).get('shape', 'N/A')}")
                
                # Limpar arquivo tempor√°rio
                os.unlink(tmp_file.name)
                
        else:
            print("‚ùå M√©todo process_ecg_image n√£o encontrado")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no UnifiedECGService: {str(e)}")
        return False

def test_model_service():
    """Testa o servi√ßo de modelo."""
    print("\nüîç Testando UnifiedModelService...")
    
    try:
        sys.path.append('backend/app')
        from services.unified_model_service import get_model_service
        
        # Obter servi√ßo
        model_service = get_model_service()
        
        # Listar modelos
        models = model_service.list_models()
        print(f"‚úÖ Modelos dispon√≠veis: {models}")
        
        # Testar predi√ß√£o com dados sint√©ticos
        test_data = np.random.randn(1, 12, 1000)
        
        if models:
            model_name = models[0]
            try:
                prediction = model_service.predict_ecg(test_data, model_name)
                print(f"‚úÖ Predi√ß√£o realizada com {model_name}")
                print(f"   - Tipo de resultado: {type(prediction)}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro na predi√ß√£o: {str(e)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no UnifiedModelService: {str(e)}")
        return False

def test_main_direct_syntax():
    """Testa se o main_direct.py tem sintaxe v√°lida."""
    print("\nüîç Testando sintaxe do main_direct.py...")
    
    try:
        import ast
        
        with open('backend/app/main_direct.py', 'r') as f:
            content = f.read()
        
        # Tentar parsear o c√≥digo
        ast.parse(content)
        print("‚úÖ Sintaxe do main_direct.py v√°lida")
        
        return True
        
    except SyntaxError as e:
        print(f"‚ùå Erro de sintaxe no main_direct.py: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar main_direct.py: {str(e)}")
        return False

def main():
    """Executa todos os testes."""
    print("üß™ TESTE DAS CORRE√á√ïES DO CARDIOAI PRO")
    print("=" * 50)
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("Digitalizador H√≠brido", test_digitizer),
        ("UnifiedECGService", test_unified_ecg_service),
        ("UnifiedModelService", test_model_service),
        ("Sintaxe main_direct.py", test_main_direct_syntax)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {test_name}: {str(e)}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODAS AS CORRE√á√ïES EST√ÉO FUNCIONANDO!")
    else:
        print("‚ö†Ô∏è Algumas corre√ß√µes precisam de ajustes.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

