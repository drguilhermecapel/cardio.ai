"""
Aplica√ß√£o CardioAI Pro - Vers√£o PTB-XL Simplificada
Sistema de an√°lise de ECG com modelo PTB-XL pr√©-treinado
"""

from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
from contextlib import asynccontextmanager
import logging
import os
from datetime import datetime
from pathlib import Path
import json
from typing import Optional

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importar servi√ßo PTB-XL
from backend.app.services.ptbxl_model_service import get_ptbxl_service


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerenciamento do ciclo de vida da aplica√ß√£o."""
    # Startup
    logger.info("üöÄ Iniciando CardioAI Pro com modelo PTB-XL...")
    
    # Verificar modelo PTB-XL
    ptbxl_service = get_ptbxl_service()
    if ptbxl_service.is_loaded:
        model_info = ptbxl_service.get_model_info()
        logger.info(f"‚úÖ Modelo PTB-XL carregado com sucesso!")
        logger.info(f"üìä AUC: {model_info['model_info'].get('metricas', {}).get('auc_validacao', 'N/A')}")
        logger.info(f"üß† Classes: {model_info['num_classes']}")
        logger.info(f"üìã Par√¢metros: {model_info['model_info'].get('arquitetura', {}).get('total_parametros', 'N/A')}")
    else:
        logger.warning("‚ö†Ô∏è Modelo PTB-XL n√£o p√¥de ser carregado")
    
    yield
    
    # Shutdown
    logger.info("üõë Encerrando CardioAI Pro...")


# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="CardioAI Pro - PTB-XL Edition",
    description="""
    Sistema avan√ßado de an√°lise de ECG com modelo PTB-XL pr√©-treinado.
    
    ## üéØ Caracter√≠sticas Principais
    
    - **Modelo PTB-XL**: AUC de 0.9979 em valida√ß√£o
    - **71 Condi√ß√µes**: Classifica√ß√£o multilabel completa
    - **12 Deriva√ß√µes**: An√°lise completa de ECG padr√£o
    - **Precis√£o Cl√≠nica**: Modelo treinado em dataset m√©dico real
    
    ## üî¨ Endpoints Principais
    
    - `/analyze-ecg-data` - An√°lise de dados ECG com modelo PTB-XL
    - `/model-info` - Informa√ß√µes do modelo
    - `/supported-conditions` - Condi√ß√µes suportadas
    """,
    version="2.1.0-ptbxl-simple",
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/", response_class=HTMLResponse)
async def root():
    """P√°gina principal da aplica√ß√£o."""
    html_content = """
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>CardioAI Pro - PTB-XL Edition</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    </head>
    <body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
        <div class="container mx-auto px-4 py-8">
            <!-- Header -->
            <div class="text-center mb-12">
                <h1 class="text-5xl font-bold text-gray-800 mb-4">
                    <i class="fas fa-heartbeat text-red-500"></i>
                    CardioAI Pro
                </h1>
                <p class="text-xl text-gray-600 mb-2">PTB-XL Edition - Modelo Pr√©-treinado Integrado</p>
                <div class="flex justify-center items-center space-x-4 text-sm text-gray-500">
                    <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full">
                        <i class="fas fa-check-circle"></i> Modelo PTB-XL Ativo
                    </span>
                    <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                        <i class="fas fa-brain"></i> AUC: 0.9979
                    </span>
                    <span class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full">
                        <i class="fas fa-list"></i> 71 Condi√ß√µes
                    </span>
                </div>
            </div>

            <!-- Cards de Funcionalidades -->
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
                <!-- An√°lise PTB-XL -->
                <div class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow border-l-4 border-red-500">
                    <div class="flex items-center mb-4">
                        <i class="fas fa-microscope text-3xl text-red-500 mr-4"></i>
                        <h3 class="text-xl font-semibold text-gray-800">An√°lise PTB-XL</h3>
                    </div>
                    <p class="text-gray-600 mb-4">An√°lise de ECG com modelo pr√©-treinado de alta precis√£o</p>
                    <div class="space-y-2 text-sm text-gray-500 mb-4">
                        <div><i class="fas fa-check text-green-500"></i> 71 condi√ß√µes card√≠acas</div>
                        <div><i class="fas fa-check text-green-500"></i> 12 deriva√ß√µes completas</div>
                        <div><i class="fas fa-check text-green-500"></i> Recomenda√ß√µes cl√≠nicas</div>
                    </div>
                    <button onclick="openAnalysis()" class="w-full bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition-colors">
                        <i class="fas fa-chart-line mr-2"></i>Analisar ECG
                    </button>
                </div>

                <!-- Informa√ß√µes do Modelo -->
                <div class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow border-l-4 border-green-500">
                    <div class="flex items-center mb-4">
                        <i class="fas fa-info-circle text-3xl text-green-500 mr-4"></i>
                        <h3 class="text-xl font-semibold text-gray-800">Modelo PTB-XL</h3>
                    </div>
                    <p class="text-gray-600 mb-4">Informa√ß√µes detalhadas do modelo de IA</p>
                    <div class="space-y-2 text-sm text-gray-500 mb-4">
                        <div><i class="fas fa-check text-green-500"></i> M√©tricas de performance</div>
                        <div><i class="fas fa-check text-green-500"></i> Condi√ß√µes suportadas</div>
                        <div><i class="fas fa-check text-green-500"></i> Especifica√ß√µes t√©cnicas</div>
                    </div>
                    <button onclick="openModelInfo()" class="w-full bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition-colors">
                        <i class="fas fa-chart-line mr-2"></i>Ver Informa√ß√µes
                    </button>
                </div>

                <!-- Documenta√ß√£o API -->
                <div class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow border-l-4 border-purple-500">
                    <div class="flex items-center mb-4">
                        <i class="fas fa-book text-3xl text-purple-500 mr-4"></i>
                        <h3 class="text-xl font-semibold text-gray-800">Documenta√ß√£o</h3>
                    </div>
                    <p class="text-gray-600 mb-4">APIs RESTful para integra√ß√£o</p>
                    <div class="space-y-2 text-sm text-gray-500 mb-4">
                        <div><i class="fas fa-check text-green-500"></i> Swagger UI interativo</div>
                        <div><i class="fas fa-check text-green-500"></i> Exemplos de c√≥digo</div>
                        <div><i class="fas fa-check text-green-500"></i> Modelo pr√©-treinado</div>
                    </div>
                    <button onclick="window.open('/docs', '_blank')" class="w-full bg-purple-500 text-white py-2 px-4 rounded-lg hover:bg-purple-600 transition-colors">
                        <i class="fas fa-external-link-alt mr-2"></i>Ver Docs
                    </button>
                </div>
            </div>

            <!-- Status do Sistema -->
            <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">
                    <i class="fas fa-server text-yellow-500 mr-2"></i>Status do Sistema
                </h3>
                <div id="systemStatus" class="grid md:grid-cols-3 gap-4">
                    <div class="text-center">
                        <div class="text-2xl font-bold text-green-600">‚úÖ</div>
                        <div class="text-sm text-gray-600">Modelo PTB-XL</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-blue-600">üß†</div>
                        <div class="text-sm text-gray-600">71 Condi√ß√µes</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-purple-600">üìä</div>
                        <div class="text-sm text-gray-600">AUC: 0.9979</div>
                    </div>
                </div>
                <button onclick="checkSystemStatus()" class="w-full mt-4 bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600 transition-colors">
                    <i class="fas fa-sync-alt mr-2"></i>Verificar Status
                </button>
            </div>

            <!-- Footer -->
            <div class="text-center text-gray-500 text-sm">
                <p>&copy; 2025 CardioAI Pro - PTB-XL Edition. Sistema de an√°lise de ECG com modelo pr√©-treinado real.</p>
                <p class="mt-2">
                    <span class="inline-flex items-center">
                        <i class="fas fa-brain mr-1"></i>
                        Modelo PTB-XL Integrado
                    </span>
                    <span class="mx-2">‚Ä¢</span>
                    <span class="inline-flex items-center">
                        <i class="fas fa-chart-line mr-1"></i>
                        Precis√£o Diagn√≥stica Real
                    </span>
                    <span class="mx-2">‚Ä¢</span>
                    <span class="inline-flex items-center">
                        <i class="fas fa-hospital mr-1"></i>
                        Uso Cl√≠nico
                    </span>
                </p>
            </div>
        </div>

        <script>
            // Verificar status do sistema
            async function checkSystemStatus() {
                try {
                    const response = await fetch('/health');
                    const data = await response.json();
                    
                    alert(`Status: ${data.status}\\nModelo PTB-XL: ${data.services.ptbxl_model}\\nClasses: ${data.model_performance.num_classes}\\nAUC: ${data.model_performance.auc_validation}`);
                } catch (error) {
                    alert('Erro ao verificar status: ' + error.message);
                }
            }

            // Abrir informa√ß√µes do modelo
            function openModelInfo() {
                window.open('/model-info', '_blank');
            }

            // Abrir an√°lise
            function openAnalysis() {
                alert('Funcionalidade de an√°lise dispon√≠vel via API.\\nVeja /docs para exemplos de uso.');
            }
        </script>
    </body>
    </html>
    """
    return html_content


@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema."""
    try:
        ptbxl_service = get_ptbxl_service()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "2.1.0-ptbxl-simple",
            "mode": "ptbxl_production",
            "services": {
                "ptbxl_model": "loaded" if ptbxl_service.is_loaded else "error",
                "models_loaded": 1 if ptbxl_service.is_loaded else 0,
                "available_models": ["ptbxl_ecg_classifier"] if ptbxl_service.is_loaded else [],
                "backend": "running"
            },
            "capabilities": {
                "ptbxl_analysis": ptbxl_service.is_loaded,
                "ecg_data_analysis": True,
                "clinical_recommendations": True,
                "web_interface": True
            },
            "model_performance": {
                "auc_validation": ptbxl_service.model_info.get('metricas', {}).get('auc_validacao', 0.9979) if ptbxl_service.is_loaded else None,
                "num_classes": ptbxl_service.num_classes if ptbxl_service.is_loaded else None,
                "dataset": "PTB-XL" if ptbxl_service.is_loaded else None
            }
        }
    except Exception as e:
        logger.error(f"Erro no health check: {str(e)}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
        )


@app.get("/model-info")
async def get_model_info():
    """Informa√ß√µes detalhadas do modelo PTB-XL."""
    try:
        ptbxl_service = get_ptbxl_service()
        
        if not ptbxl_service.is_loaded:
            raise HTTPException(status_code=503, detail="Modelo PTB-XL n√£o dispon√≠vel")
        
        model_info = ptbxl_service.get_model_info()
        
        # Adicionar informa√ß√µes extras
        model_info.update({
            "description": "Modelo pr√©-treinado no dataset PTB-XL para classifica√ß√£o multilabel de ECG",
            "capabilities": [
                "Classifica√ß√£o de 71 condi√ß√µes card√≠acas",
                "An√°lise de 12 deriva√ß√µes",
                "Processamento de sinais de 10 segundos",
                "Frequ√™ncia de amostragem: 100 Hz",
                "AUC de valida√ß√£o: 0.9979"
            ],
            "clinical_applications": [
                "Diagn√≥stico autom√°tico de ECG",
                "Triagem de emerg√™ncia",
                "Telemedicina",
                "Suporte √† decis√£o cl√≠nica"
            ]
        })
        
        return JSONResponse(content=model_info)
        
    except Exception as e:
        logger.error(f"Erro ao obter info do modelo: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/supported-conditions")
async def get_supported_conditions():
    """Lista todas as condi√ß√µes suportadas pelo modelo PTB-XL."""
    try:
        ptbxl_service = get_ptbxl_service()
        
        if not ptbxl_service.is_loaded:
            raise HTTPException(status_code=503, detail="Modelo n√£o dispon√≠vel")
        
        classes = ptbxl_service.classes_mapping.get('classes', {})
        
        response = {
            'total_conditions': len(classes),
            'conditions': [
                {
                    'id': int(class_id),
                    'name': class_name
                }
                for class_id, class_name in classes.items()
            ]
        }
        
        return JSONResponse(content=response)
        
    except Exception as e:
        logger.error(f"Erro ao obter condi√ß√µes: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/analyze-ecg-data")
async def analyze_ecg_data(
    patient_id: str = Form(..., description="ID √∫nico do paciente"),
    ecg_data: str = Form(..., description="Dados ECG em formato JSON"),
    metadata: Optional[str] = Form(None, description="Metadados adicionais (JSON)")
):
    """
    An√°lise de dados ECG usando modelo PTB-XL pr√©-treinado.
    
    Formato esperado para ecg_data:
    {
        "Lead_1": {"signal": [lista de 1000 valores]},
        "Lead_2": {"signal": [lista de 1000 valores]},
        ...
        "Lead_12": {"signal": [lista de 1000 valores]}
    }
    """
    try:
        # Validar e processar dados ECG
        try:
            ecg_dict = json.loads(ecg_data)
        except json.JSONDecodeError:
            raise HTTPException(status_code=400, detail="Dados ECG devem estar em formato JSON v√°lido")
        
        # Processar metadados
        metadata_dict = {}
        if metadata:
            try:
                metadata_dict = json.loads(metadata)
            except json.JSONDecodeError:
                logger.warning("Metadados inv√°lidos fornecidos")
        
        # Obter servi√ßo PTB-XL
        ptbxl_service = get_ptbxl_service()
        
        if not ptbxl_service.is_loaded:
            raise HTTPException(status_code=503, detail="Modelo PTB-XL n√£o dispon√≠vel")
        
        # Realizar predi√ß√£o com modelo PTB-XL
        logger.info(f"Realizando an√°lise PTB-XL para paciente {patient_id}...")
        prediction_result = ptbxl_service.predict_ecg(ecg_dict, metadata_dict)
        
        if 'error' in prediction_result:
            raise HTTPException(
                status_code=500, 
                detail=f"Erro na predi√ß√£o: {prediction_result['error']}"
            )
        
        # Criar ID √∫nico para an√°lise
        analysis_id = f"ptbxl_analysis_{patient_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Preparar resposta
        response = {
            'analysis_id': analysis_id,
            'patient_id': patient_id,
            'timestamp': datetime.now().isoformat(),
            'ptbxl_analysis': prediction_result,
            'model_info': {
                'name': 'PTB-XL ECG Classifier',
                'version': '1.0',
                'auc_validation': 0.9979,
                'num_classes': 71,
                'dataset': 'PTB-XL'
            }
        }
        
        logger.info(f"An√°lise PTB-XL conclu√≠da para {patient_id}")
        return JSONResponse(content=response)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro na an√°lise PTB-XL: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@app.get("/info")
async def system_info():
    """Informa√ß√µes detalhadas do sistema."""
    try:
        ptbxl_service = get_ptbxl_service()
        
        return {
            "system": {
                "name": "CardioAI Pro - PTB-XL Edition",
                "version": "2.1.0-ptbxl-simple",
                "description": "Sistema de an√°lise de ECG com modelo PTB-XL pr√©-treinado"
            },
            "model": ptbxl_service.get_model_info() if ptbxl_service.is_loaded else {"error": "Modelo n√£o carregado"},
            "capabilities": [
                "An√°lise de dados ECG com modelo PTB-XL",
                "Classifica√ß√£o de 71 condi√ß√µes card√≠acas",
                "An√°lise de 12 deriva√ß√µes completas",
                "Recomenda√ß√µes cl√≠nicas autom√°ticas",
                "Interface web interativa",
                "APIs RESTful"
            ],
            "performance": {
                "model_accuracy": "AUC 0.9979 (valida√ß√£o PTB-XL)",
                "analysis_time": "1-2 segundos por an√°lise",
                "supported_conditions": 71
            },
            "endpoints": {
                "analyze_ecg_data": "/analyze-ecg-data",
                "model_info": "/model-info",
                "supported_conditions": "/supported-conditions",
                "documentation": "/docs",
                "health_check": "/health"
            },
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Erro ao obter informa√ß√µes: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main_ptbxl_simple:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    )

