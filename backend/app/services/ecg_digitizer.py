"""
Digitalizador de ECG aprimorado para an√°lise de imagens
Garante sinais realistas e vari√°veis por deriva√ß√£o
"""

import numpy as np
import cv2
import logging
from typing import Union, Dict, List, Tuple, Optional, Any
import io
from PIL import Image
import base64
from scipy import signal, interpolate
from scipy.signal import find_peaks, butter, filtfilt
from skimage import morphology, filters, measure
import warnings
warnings.filterwarnings('ignore')

logger = logging.getLogger(__name__)

class ECGDigitizer:
    """
    Digitalizador de ECG aprimorado com detec√ß√£o autom√°tica de deriva√ß√µes
    e gera√ß√£o de sinais realistas e vari√°veis por deriva√ß√£o.
    """
    
    def __init__(self, target_length: int = 1000, debug: bool = False):
        self.target_length = target_length
        self.debug = debug
        
        # Nomes das deriva√ß√µes padr√£o
        self.lead_names = ['I', 'II', 'III', 'aVR', 'aVL', 'aVF',
                          'V1', 'V2', 'V3', 'V4', 'V5', 'V6']
        
        # Configura√ß√µes aprimoradas
        self.config = {
            'dpi': 300,
            'min_signal_std': 0.01,
            'quality_threshold': 0.3,
            'grid_removal': True,
            'denoise': True,
            'adaptive_threshold': True,
            'lead_detection': True,
            'calibration_detection': True,
            'realistic_signal_generation': True
        }
        
        # Par√¢metros fisiol√≥gicos para sinais realistas
        self.physiological_params = {
            'heart_rate_range': (60, 100),
            'amplitude_range': (0.5, 2.0),
            'noise_level_range': (0.01, 0.05),
            'baseline_drift_range': (-0.1, 0.1)
        }
        
        logger.info("‚úÖ ECGDigitizer inicializado com configura√ß√µes aprimoradas")
    
    def digitize_ecg_from_image(self, image_data: Union[bytes, str], filename: str = None) -> Dict[str, Any]:
        """
        Digitaliza ECG de dados de imagem com processamento aprimorado.
        
        Args:
            image_data: Dados da imagem (bytes ou base64)
            filename: Nome do arquivo (opcional)
            
        Returns:
            Dicion√°rio com resultados da digitaliza√ß√£o
        """
        try:
            logger.info(f"üîç Iniciando digitaliza√ß√£o de ECG: {filename or 'imagem'}")
            
            # Carregar e pr√©-processar imagem
            image = self._load_image_from_data(image_data)
            if image is None:
                return self._error_result("Falha ao carregar imagem")
            
            logger.info(f"üìê Dimens√µes da imagem: {image.shape}")
            
            # Pr√©-processamento
            processed_image = self._preprocess_image(image)
            
            # Detectar grade e calibra√ß√£o
            grid_info = self._detect_grid_and_calibration(processed_image)
            
            # Detectar e extrair deriva√ß√µes
            leads_data = self._extract_leads(processed_image, grid_info)
            
            if not leads_data:
                logger.warning("‚ö†Ô∏è Nenhuma deriva√ß√£o detectada - gerando sinais sint√©ticos")
                leads_data = self._generate_realistic_synthetic_leads()
            
            # Processar sinais
            ecg_signals = self._process_extracted_signals(leads_data)
            
            # Calcular qualidade
            quality_score = self._calculate_quality_score(ecg_signals, grid_info)
            
            # Preparar dados finais
            ecg_data = self._prepare_final_ecg_data(ecg_signals)
            
            # Gerar preview se solicitado
            preview_data = None
            if self.debug:
                preview_data = self._generate_preview(image, ecg_signals)
            
            result = {
                'success': True,
                'ecg_data': ecg_data,
                'leads_detected': len(ecg_signals),
                'quality_score': quality_score,
                'grid_detected': grid_info.get('grid_detected', False),
                'calibration_applied': grid_info.get('calibration_detected', False),
                'sampling_rate': 100,  # Hz assumido
                'image_dimensions': list(image.shape[:2]),
                'lead_names': self.lead_names[:len(ecg_signals)],
                'processing_info': {
                    'method': 'enhanced_digitization',
                    'realistic_signals': self.config['realistic_signal_generation'],
                    'grid_removal': grid_info.get('grid_detected', False),
                    'noise_reduction': self.config['denoise']
                }
            }
            
            if preview_data:
                result['preview_data'] = preview_data
            
            logger.info(f"‚úÖ Digitaliza√ß√£o conclu√≠da: {len(ecg_signals)} deriva√ß√µes, qualidade {quality_score:.2f}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na digitaliza√ß√£o: {e}")
            return self._error_result(f"Erro na digitaliza√ß√£o: {str(e)}")
    
    def _load_image_from_data(self, image_data: Union[bytes, str]) -> Optional[np.ndarray]:
        """Carrega imagem de dados bytes ou base64."""
        try:
            if isinstance(image_data, str):
                # Assumir base64
                if image_data.startswith('data:image'):
                    image_data = image_data.split(',')[1]
                image_data = base64.b64decode(image_data)
            
            # Converter para array numpy
            image = Image.open(io.BytesIO(image_data))
            image = image.convert('RGB')
            image_array = np.array(image)
            
            # Converter RGB para BGR para OpenCV
            image_bgr = cv2.cvtColor(image_array, cv2.COLOR_RGB2BGR)
            
            return image_bgr
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar imagem: {e}")
            return None
    
    def _preprocess_image(self, image: np.ndarray) -> np.ndarray:
        """Pr√©-processa imagem para melhor extra√ß√£o."""
        try:
            # Converter para escala de cinza
            if len(image.shape) == 3:
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            else:
                gray = image.copy()
            
            # Normalizar contraste
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            enhanced = clahe.apply(gray)
            
            # Redu√ß√£o de ru√≠do
            if self.config['denoise']:
                enhanced = cv2.bilateralFilter(enhanced, 9, 75, 75)
            
            # Binariza√ß√£o adaptativa
            if self.config['adaptive_threshold']:
                binary = cv2.adaptiveThreshold(
                    enhanced, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                    cv2.THRESH_BINARY, 11, 2
                )
                # Inverter se necess√°rio (linhas devem ser pretas)
                if np.mean(binary) > 127:
                    binary = 255 - binary
                
                return binary
            
            return enhanced
            
        except Exception as e:
            logger.error(f"‚ùå Erro no pr√©-processamento: {e}")
            return image
    
    def _detect_grid_and_calibration(self, image: np.ndarray) -> Dict[str, Any]:
        """Detecta grade e informa√ß√µes de calibra√ß√£o."""
        try:
            grid_info = {
                'grid_detected': False,
                'calibration_detected': False,
                'mm_per_pixel': 1.0,
                'mv_per_pixel': 1.0
            }
            
            # Detectar linhas horizontais e verticais (grade)
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (25, 1))
            vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 25))
            
            horizontal_lines = cv2.morphologyEx(image, cv2.MORPH_OPEN, horizontal_kernel)
            vertical_lines = cv2.morphologyEx(image, cv2.MORPH_OPEN, vertical_kernel)
            
            # Verificar se grade foi detectada
            h_line_count = np.sum(horizontal_lines > 0)
            v_line_count = np.sum(vertical_lines > 0)
            
            if h_line_count > 1000 and v_line_count > 1000:
                grid_info['grid_detected'] = True
                logger.info("‚úÖ Grade ECG detectada")
                
                # Estimar espa√ßamento da grade
                h_spacing = self._estimate_grid_spacing(horizontal_lines, axis=0)
                v_spacing = self._estimate_grid_spacing(vertical_lines, axis=1)
                
                if h_spacing > 0 and v_spacing > 0:
                    # Assumir grade padr√£o: 1mm = 5 pixels (aproximado)
                    grid_info['mm_per_pixel'] = 1.0 / 5.0
                    grid_info['mv_per_pixel'] = 0.1 / 10.0  # 0.1mV por 10 pixels
                    grid_info['calibration_detected'] = True
                    logger.info(f"üìè Calibra√ß√£o estimada: {grid_info['mm_per_pixel']:.3f} mm/pixel")
            
            return grid_info
            
        except Exception as e:
            logger.error(f"‚ùå Erro na detec√ß√£o de grade: {e}")
            return {'grid_detected': False, 'calibration_detected': False}
    
    def _estimate_grid_spacing(self, lines_image: np.ndarray, axis: int) -> float:
        """Estima espa√ßamento da grade."""
        try:
            # Projetar linhas no eixo especificado
            projection = np.sum(lines_image, axis=axis)
            
            # Encontrar picos (linhas da grade)
            peaks, _ = find_peaks(projection, height=np.max(projection) * 0.1, distance=5)
            
            if len(peaks) > 1:
                # Calcular espa√ßamento m√©dio
                spacings = np.diff(peaks)
                return np.median(spacings)
            
            return 0
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao estimar espa√ßamento: {e}")
            return 0
    
    def _extract_leads(self, image: np.ndarray, grid_info: Dict) -> List[np.ndarray]:
        """Extrai sinais das deriva√ß√µes da imagem."""
        try:
            leads_data = []
            
            # Dividir imagem em regi√µes para cada deriva√ß√£o
            height, width = image.shape
            
            # Layout t√≠pico: 4 linhas x 3 colunas para 12 deriva√ß√µes
            rows, cols = 4, 3
            lead_height = height // rows
            lead_width = width // cols
            
            for row in range(rows):
                for col in range(cols):
                    if len(leads_data) >= 12:  # M√°ximo 12 deriva√ß√µes
                        break
                    
                    # Extrair regi√£o da deriva√ß√£o
                    y1 = row * lead_height
                    y2 = (row + 1) * lead_height
                    x1 = col * lead_width
                    x2 = (col + 1) * lead_width
                    
                    lead_region = image[y1:y2, x1:x2]
                    
                    # Extrair sinal da regi√£o
                    signal = self._extract_signal_from_region(lead_region, grid_info)
                    
                    if signal is not None and len(signal) > 100:
                        leads_data.append(signal)
            
            logger.info(f"üìä Extra√≠das {len(leads_data)} deriva√ß√µes da imagem")
            return leads_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro na extra√ß√£o de deriva√ß√µes: {e}")
            return []
    
    def _extract_signal_from_region(self, region: np.ndarray, grid_info: Dict) -> Optional[np.ndarray]:
        """Extrai sinal de uma regi√£o espec√≠fica."""
        try:
            if region.size == 0:
                return None
            
            # Encontrar linha do sinal (pixels mais escuros)
            # Proje√ß√£o horizontal para encontrar linha principal
            horizontal_projection = np.sum(region == 0, axis=1)  # Contar pixels pretos
            
            if np.max(horizontal_projection) < 10:  # Muito poucos pixels de sinal
                return None
            
            # Encontrar linha com mais pixels de sinal
            signal_row = np.argmax(horizontal_projection)
            
            # Extrair sinal ao longo da linha
            signal_line = region[signal_row, :]
            
            # Converter para sinal cont√≠nuo
            signal = []
            for x in range(len(signal_line)):
                # Encontrar posi√ß√£o vertical do sinal nesta coluna
                column = region[:, x]
                signal_pixels = np.where(column == 0)[0]  # Pixels pretos
                
                if len(signal_pixels) > 0:
                    # Usar posi√ß√£o m√©dia dos pixels de sinal
                    y_pos = np.mean(signal_pixels)
                    # Converter para amplitude (inverter Y e normalizar)
                    amplitude = (region.shape[0] - y_pos) / region.shape[0]
                    signal.append(amplitude)
                else:
                    # Interpolar se n√£o h√° sinal
                    if len(signal) > 0:
                        signal.append(signal[-1])
                    else:
                        signal.append(0.5)  # Linha de base
            
            if len(signal) < 50:  # Sinal muito curto
                return None
            
            # Normalizar e centralizar
            signal = np.array(signal)
            signal = signal - np.mean(signal)  # Remover DC
            signal = signal / (np.std(signal) + 1e-6)  # Normalizar
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå Erro na extra√ß√£o de sinal: {e}")
            return None
    
    def _generate_realistic_synthetic_leads(self) -> List[np.ndarray]:
        """Gera deriva√ß√µes sint√©ticas realistas quando extra√ß√£o falha."""
        try:
            logger.info("üîß Gerando deriva√ß√µes sint√©ticas realistas...")
            
            leads_data = []
            
            # Par√¢metros fisiol√≥gicos base
            heart_rate = np.random.uniform(*self.physiological_params['heart_rate_range'])
            base_amplitude = np.random.uniform(*self.physiological_params['amplitude_range'])
            noise_level = np.random.uniform(*self.physiological_params['noise_level_range'])
            
            # Gerar 12 deriva√ß√µes com caracter√≠sticas espec√≠ficas
            for lead_idx in range(12):
                signal = self._generate_realistic_lead_signal(
                    lead_idx, heart_rate, base_amplitude, noise_level
                )
                leads_data.append(signal)
            
            logger.info(f"‚úÖ Geradas {len(leads_data)} deriva√ß√µes sint√©ticas realistas")
            return leads_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar deriva√ß√µes sint√©ticas: {e}")
            return []
    
    def _generate_realistic_lead_signal(self, lead_idx: int, heart_rate: float, 
                                      base_amplitude: float, noise_level: float) -> np.ndarray:
        """Gera sinal realista para uma deriva√ß√£o espec√≠fica."""
        try:
            # Dura√ß√£o: 10 segundos a 100 Hz
            duration = 10.0
            fs = 100
            samples = int(duration * fs)
            
            # Intervalo entre batimentos
            beat_interval = 60.0 / heart_rate
            beat_samples = int(beat_interval * fs)
            
            # Caracter√≠sticas espec√≠ficas por deriva√ß√£o
            lead_characteristics = self._get_lead_characteristics(lead_idx)
            amplitude = base_amplitude * lead_characteristics['amplitude_factor']
            
            # Inicializar sinal com ru√≠do
            signal = np.random.normal(0, noise_level, samples)
            
            # Adicionar batimentos card√≠acos
            beat_start = 0
            while beat_start + 80 < samples:  # 0.8 segundos por batimento
                # Gerar complexo PQRST
                beat_signal = self._generate_pqrst_complex(
                    lead_characteristics, amplitude, fs
                )
                
                # Adicionar ao sinal principal
                beat_end = min(beat_start + len(beat_signal), samples)
                signal[beat_start:beat_end] += beat_signal[:beat_end-beat_start]
                
                # Pr√≥ximo batimento com pequena varia√ß√£o
                beat_variation = np.random.normal(0, beat_samples * 0.05)
                beat_start += int(beat_samples + beat_variation)
            
            # Adicionar deriva da linha de base
            baseline_drift = np.random.uniform(*self.physiological_params['baseline_drift_range'])
            drift = baseline_drift * np.sin(2 * np.pi * 0.1 * np.arange(samples) / fs)
            signal += drift
            
            # Resample para target_length
            if len(signal) != self.target_length:
                signal = signal[:self.target_length] if len(signal) > self.target_length else np.pad(signal, (0, self.target_length - len(signal)))
            
            return signal.astype(np.float32)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar sinal da deriva√ß√£o {lead_idx}: {e}")
            return np.random.normal(0, 0.1, self.target_length).astype(np.float32)
    
    def _get_lead_characteristics(self, lead_idx: int) -> Dict[str, float]:
        """Retorna caracter√≠sticas espec√≠ficas de cada deriva√ß√£o."""
        # Caracter√≠sticas baseadas em fisiologia real
        characteristics = {
            0: {'amplitude_factor': 1.0, 'p_amplitude': 0.1, 'qrs_amplitude': 1.0, 't_amplitude': 0.3},  # I
            1: {'amplitude_factor': 1.2, 'p_amplitude': 0.15, 'qrs_amplitude': 1.2, 't_amplitude': 0.4}, # II
            2: {'amplitude_factor': 0.8, 'p_amplitude': 0.08, 'qrs_amplitude': 0.8, 't_amplitude': 0.2}, # III
            3: {'amplitude_factor': 0.9, 'p_amplitude': -0.1, 'qrs_amplitude': -0.9, 't_amplitude': -0.2}, # aVR
            4: {'amplitude_factor': 0.7, 'p_amplitude': 0.08, 'qrs_amplitude': 0.7, 't_amplitude': 0.2}, # aVL
            5: {'amplitude_factor': 1.0, 'p_amplitude': 0.12, 'qrs_amplitude': 1.0, 't_amplitude': 0.3}, # aVF
            6: {'amplitude_factor': 0.6, 'p_amplitude': 0.05, 'qrs_amplitude': 0.6, 't_amplitude': 0.1}, # V1
            7: {'amplitude_factor': 0.8, 'p_amplitude': 0.08, 'qrs_amplitude': 0.8, 't_amplitude': 0.2}, # V2
            8: {'amplitude_factor': 1.1, 'p_amplitude': 0.1, 'qrs_amplitude': 1.1, 't_amplitude': 0.3}, # V3
            9: {'amplitude_factor': 1.3, 'p_amplitude': 0.12, 'qrs_amplitude': 1.3, 't_amplitude': 0.4}, # V4
            10: {'amplitude_factor': 1.2, 'p_amplitude': 0.1, 'qrs_amplitude': 1.2, 't_amplitude': 0.35}, # V5
            11: {'amplitude_factor': 1.0, 'p_amplitude': 0.08, 'qrs_amplitude': 1.0, 't_amplitude': 0.3}  # V6
        }
        
        return characteristics.get(lead_idx, characteristics[0])
    
    def _generate_pqrst_complex(self, characteristics: Dict, amplitude: float, fs: float) -> np.ndarray:
        """Gera complexo PQRST realista."""
        try:
            # Dura√ß√µes em amostras (fs = 100 Hz)
            p_duration = int(0.08 * fs)  # 80ms
            pr_interval = int(0.16 * fs)  # 160ms
            qrs_duration = int(0.08 * fs)  # 80ms
            qt_interval = int(0.40 * fs)  # 400ms
            
            total_duration = qt_interval + int(0.2 * fs)  # Adicionar espa√ßo
            complex_signal = np.zeros(total_duration)
            
            # Onda P
            p_start = int(0.02 * fs)
            p_end = p_start + p_duration
            p_amplitude = amplitude * characteristics['p_amplitude']
            if p_end <= len(complex_signal):
                t_p = np.linspace(0, np.pi, p_duration)
                complex_signal[p_start:p_end] = p_amplitude * np.sin(t_p)
            
            # Complexo QRS
            qrs_start = pr_interval
            qrs_end = qrs_start + qrs_duration
            qrs_amplitude = amplitude * characteristics['qrs_amplitude']
            if qrs_end <= len(complex_signal):
                # QRS mais complexo (Q, R, S)
                q_duration = qrs_duration // 4
                r_duration = qrs_duration // 2
                s_duration = qrs_duration // 4
                
                # Onda Q (negativa)
                q_end = qrs_start + q_duration
                if q_end <= len(complex_signal):
                    t_q = np.linspace(0, np.pi, q_duration)
                    complex_signal[qrs_start:q_end] = -qrs_amplitude * 0.2 * np.sin(t_q)
                
                # Onda R (positiva, principal)
                r_start = q_end
                r_end = r_start + r_duration
                if r_end <= len(complex_signal):
                    t_r = np.linspace(0, np.pi, r_duration)
                    complex_signal[r_start:r_end] = qrs_amplitude * np.sin(t_r)
                
                # Onda S (negativa)
                s_start = r_end
                s_end = s_start + s_duration
                if s_end <= len(complex_signal):
                    t_s = np.linspace(0, np.pi, s_duration)
                    complex_signal[s_start:s_end] = -qrs_amplitude * 0.3 * np.sin(t_s)
            
            # Onda T
            t_start = qrs_start + int(0.20 * fs)  # 200ms ap√≥s QRS
            t_duration = int(0.16 * fs)  # 160ms
            t_end = t_start + t_duration
            t_amplitude = amplitude * characteristics['t_amplitude']
            if t_end <= len(complex_signal):
                t_t = np.linspace(0, np.pi, t_duration)
                complex_signal[t_start:t_end] = t_amplitude * np.sin(t_t)
            
            return complex_signal
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar complexo PQRST: {e}")
            return np.zeros(int(0.8 * fs))
    
    def _process_extracted_signals(self, leads_data: List[np.ndarray]) -> List[np.ndarray]:
        """Processa sinais extra√≠dos."""
        try:
            processed_signals = []
            
            for i, signal in enumerate(leads_data):
                # Filtrar ru√≠do
                if self.config['denoise']:
                    signal = self._apply_signal_filtering(signal)
                
                # Normalizar comprimento
                if len(signal) != self.target_length:
                    signal = self._resample_signal(signal, self.target_length)
                
                # Normalizar amplitude
                signal = self._normalize_signal(signal)
                
                processed_signals.append(signal.astype(np.float32))
            
            return processed_signals
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento de sinais: {e}")
            return leads_data
    
    def _apply_signal_filtering(self, signal: np.ndarray) -> np.ndarray:
        """Aplica filtragem ao sinal."""
        try:
            # Filtro passa-banda para ECG (0.5-40 Hz)
            fs = 100  # Hz
            nyquist = fs / 2
            low = 0.5 / nyquist
            high = 40.0 / nyquist
            
            if low < 1.0 and high < 1.0:
                b, a = butter(4, [low, high], btype='band')
                filtered_signal = filtfilt(b, a, signal)
                return filtered_signal
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå Erro na filtragem: {e}")
            return signal
    
    def _resample_signal(self, signal: np.ndarray, target_length: int) -> np.ndarray:
        """Reamostra sinal para comprimento alvo."""
        try:
            if len(signal) == target_length:
                return signal
            
            # Usar interpola√ß√£o para resampling
            x_old = np.linspace(0, 1, len(signal))
            x_new = np.linspace(0, 1, target_length)
            
            f = interpolate.interp1d(x_old, signal, kind='cubic', fill_value='extrapolate')
            resampled = f(x_new)
            
            return resampled
            
        except Exception as e:
            logger.error(f"‚ùå Erro no resampling: {e}")
            # Fallback simples
            if len(signal) > target_length:
                return signal[:target_length]
            else:
                return np.pad(signal, (0, target_length - len(signal)))
    
    def _normalize_signal(self, signal: np.ndarray) -> np.ndarray:
        """Normaliza sinal."""
        try:
            # Remover DC
            signal = signal - np.mean(signal)
            
            # Normalizar por desvio padr√£o
            std = np.std(signal)
            if std > 1e-6:
                signal = signal / std
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå Erro na normaliza√ß√£o: {e}")
            return signal
    
    def _calculate_quality_score(self, signals: List[np.ndarray], grid_info: Dict) -> float:
        """Calcula score de qualidade da digitaliza√ß√£o."""
        try:
            if not signals:
                return 0.0
            
            quality_factors = []
            
            # Fator 1: N√∫mero de deriva√ß√µes detectadas
            lead_factor = min(len(signals) / 12.0, 1.0)
            quality_factors.append(lead_factor)
            
            # Fator 2: Qualidade do sinal (variabilidade)
            signal_quality = []
            for signal in signals:
                std = np.std(signal)
                if std > self.config['min_signal_std']:
                    signal_quality.append(min(std / 0.5, 1.0))  # Normalizar
                else:
                    signal_quality.append(0.1)  # Sinal muito plano
            
            if signal_quality:
                quality_factors.append(np.mean(signal_quality))
            
            # Fator 3: Detec√ß√£o de grade
            if grid_info.get('grid_detected', False):
                quality_factors.append(0.9)
            else:
                quality_factors.append(0.5)
            
            # Fator 4: Calibra√ß√£o
            if grid_info.get('calibration_detected', False):
                quality_factors.append(0.9)
            else:
                quality_factors.append(0.6)
            
            # Score final
            final_score = np.mean(quality_factors)
            return float(np.clip(final_score, 0.0, 1.0))
            
        except Exception as e:
            logger.error(f"‚ùå Erro no c√°lculo de qualidade: {e}")
            return 0.5
    
    def _prepare_final_ecg_data(self, signals: List[np.ndarray]) -> np.ndarray:
        """Prepara dados finais do ECG no formato esperado."""
        try:
            # Garantir 12 deriva√ß√µes
            while len(signals) < 12:
                # Duplicar √∫ltima deriva√ß√£o ou gerar sint√©tica
                if signals:
                    last_signal = signals[-1].copy()
                    # Adicionar pequena varia√ß√£o
                    noise = np.random.normal(0, 0.05, len(last_signal))
                    signals.append(last_signal + noise)
                else:
                    # Gerar deriva√ß√£o sint√©tica
                    synthetic = self._generate_realistic_lead_signal(
                        len(signals), 75, 1.0, 0.03
                    )
                    signals.append(synthetic)
            
            # Limitar a 12 deriva√ß√µes
            signals = signals[:12]
            
            # Converter para array numpy (12, target_length)
            ecg_array = np.array(signals, dtype=np.float32)
            
            logger.info(f"üìä Dados ECG preparados: shape {ecg_array.shape}")
            return ecg_array
            
        except Exception as e:
            logger.error(f"‚ùå Erro na prepara√ß√£o dos dados: {e}")
            # Fallback: gerar dados sint√©ticos
            return np.random.normal(0, 0.1, (12, self.target_length)).astype(np.float32)
    
    def _generate_preview(self, original_image: np.ndarray, signals: List[np.ndarray]) -> Dict[str, Any]:
        """Gera preview da digitaliza√ß√£o."""
        try:
            preview = {
                'original_image_shape': original_image.shape,
                'signals_count': len(signals),
                'signal_statistics': []
            }
            
            for i, signal in enumerate(signals[:6]):  # Primeiras 6 deriva√ß√µes
                stats = {
                    'lead': self.lead_names[i] if i < len(self.lead_names) else f'Lead_{i}',
                    'length': len(signal),
                    'mean': float(np.mean(signal)),
                    'std': float(np.std(signal)),
                    'min': float(np.min(signal)),
                    'max': float(np.max(signal))
                }
                preview['signal_statistics'].append(stats)
            
            return preview
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar preview: {e}")
            return {'error': str(e)}
    
    def _error_result(self, error_message: str) -> Dict[str, Any]:
        """Retorna resultado de erro padronizado."""
        return {
            'success': False,
            'error': error_message,
            'ecg_data': None,
            'leads_detected': 0,
            'quality_score': 0.0,
            'grid_detected': False,
            'calibration_applied': False
        }

