#!/usr/bin/env python3
"""
Script para an√°lise e teste do modelo ECG
Identifica problemas no carregamento e funcionamento do modelo
"""

import os
import sys
import numpy as np
import json
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))

def test_tensorflow_import():
    """Testa se o TensorFlow pode ser importado."""
    try:
        import tensorflow as tf
        print(f"‚úÖ TensorFlow importado com sucesso - Vers√£o: {tf.__version__}")
        return True, tf
    except ImportError as e:
        print(f"‚ùå Erro ao importar TensorFlow: {e}")
        return False, None

def test_model_loading():
    """Testa o carregamento do modelo ECG."""
    print("\n=== TESTE DE CARREGAMENTO DO MODELO ===")
    
    # Verificar se TensorFlow est√° dispon√≠vel
    tf_available, tf = test_tensorflow_import()
    if not tf_available:
        return False, None
    
    # Caminhos poss√≠veis para o modelo
    model_paths = [
        "models/ecg_model_final.h5",
        "ecg_model_final.h5",
        "backend/models/ecg_model_final.h5"
    ]
    
    model = None
    model_path = None
    
    for path in model_paths:
        if os.path.exists(path):
            print(f"üìÅ Modelo encontrado em: {path}")
            try:
                model = tf.keras.models.load_model(path)
                model_path = path
                print(f"‚úÖ Modelo carregado com sucesso!")
                break
            except Exception as e:
                print(f"‚ùå Erro ao carregar modelo de {path}: {e}")
                continue
    
    if model is None:
        print("‚ùå Nenhum modelo p√¥de ser carregado")
        return False, None
    
    return True, (model, model_path)

def analyze_model_architecture(model):
    """Analisa a arquitetura do modelo."""
    print("\n=== AN√ÅLISE DA ARQUITETURA DO MODELO ===")
    
    try:
        # Informa√ß√µes b√°sicas
        print(f"üìä Input shape: {model.input_shape}")
        print(f"üìä Output shape: {model.output_shape}")
        print(f"üìä N√∫mero de par√¢metros: {model.count_params():,}")
        
        # Resumo da arquitetura
        print("\nüìã Resumo da arquitetura:")
        model.summary()
        
        # Verificar se o modelo foi compilado
        if hasattr(model, 'optimizer') and model.optimizer is not None:
            print(f"‚úÖ Modelo compilado com otimizador: {model.optimizer.__class__.__name__}")
        else:
            print("‚ö†Ô∏è Modelo n√£o compilado")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na an√°lise da arquitetura: {e}")
        return False

def test_model_prediction(model):
    """Testa uma predi√ß√£o simples com o modelo."""
    print("\n=== TESTE DE PREDI√á√ÉO ===")
    
    try:
        # Obter shape de entrada
        input_shape = model.input_shape
        print(f"üìä Shape de entrada esperado: {input_shape}")
        
        # Criar dados de teste sint√©ticos
        if len(input_shape) == 3:  # (batch, time, features)
            test_data = np.random.randn(1, input_shape[1], input_shape[2])
        elif len(input_shape) == 2:  # (batch, features)
            test_data = np.random.randn(1, input_shape[1])
        else:
            print(f"‚ùå Shape de entrada n√£o suportado: {input_shape}")
            return False
        
        print(f"üìä Dados de teste criados com shape: {test_data.shape}")
        
        # Fazer predi√ß√£o
        prediction = model.predict(test_data, verbose=0)
        print(f"‚úÖ Predi√ß√£o realizada com sucesso!")
        print(f"üìä Shape da predi√ß√£o: {prediction.shape}")
        print(f"üìä Valores da predi√ß√£o: {prediction[0][:10]}...")  # Primeiros 10 valores
        
        return True, prediction
    except Exception as e:
        print(f"‚ùå Erro na predi√ß√£o: {e}")
        return False, None

def analyze_model_metadata():
    """Analisa metadados do modelo."""
    print("\n=== AN√ÅLISE DE METADADOS ===")
    
    metadata_paths = [
        "models/model_info.json",
        "model_info.json",
        "models/model_architecture.json"
    ]
    
    for path in metadata_paths:
        if os.path.exists(path):
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                print(f"üìÑ Metadados encontrados em: {path}")
                print(json.dumps(metadata, indent=2, ensure_ascii=False))
                return True, metadata
            except Exception as e:
                print(f"‚ùå Erro ao ler metadados de {path}: {e}")
    
    print("‚ö†Ô∏è Nenhum arquivo de metadados encontrado")
    return False, None

def check_preprocessing_functions():
    """Verifica fun√ß√µes de pr√©-processamento."""
    print("\n=== VERIFICA√á√ÉO DE PR√â-PROCESSAMENTO ===")
    
    preprocess_paths = [
        "models/preprocess_functions.py",
        "backend/app/utils/ecg_processor.py",
        "ecg_processor.py"
    ]
    
    for path in preprocess_paths:
        if os.path.exists(path):
            print(f"üìÑ Arquivo de pr√©-processamento encontrado: {path}")
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    content = f.read()
                print(f"üìä Tamanho do arquivo: {len(content)} caracteres")
                
                # Verificar fun√ß√µes importantes
                important_functions = [
                    'preprocess', 'normalize', 'filter', 'resample',
                    'extract_features', 'load_ecg', 'process_ecg'
                ]
                
                found_functions = []
                for func in important_functions:
                    if f"def {func}" in content:
                        found_functions.append(func)
                
                print(f"üîç Fun√ß√µes encontradas: {found_functions}")
                return True, path
            except Exception as e:
                print(f"‚ùå Erro ao ler {path}: {e}")
    
    print("‚ö†Ô∏è Nenhum arquivo de pr√©-processamento encontrado")
    return False, None

def identify_issues():
    """Identifica problemas comuns no modelo e pipeline."""
    print("\n=== IDENTIFICA√á√ÉO DE PROBLEMAS ===")
    
    issues = []
    
    # Verificar depend√™ncias
    try:
        import tensorflow as tf
    except ImportError:
        issues.append("TensorFlow n√£o instalado")
    
    try:
        import numpy as np
    except ImportError:
        issues.append("NumPy n√£o instalado")
    
    try:
        import pandas as pd
    except ImportError:
        issues.append("Pandas n√£o instalado")
    
    # Verificar arquivos essenciais
    essential_files = [
        "models/ecg_model_final.h5",
        "models/model_info.json",
        "backend/app/services/unified_model_service.py",
        "backend/app/services/unified_ecg_service.py"
    ]
    
    for file_path in essential_files:
        if not os.path.exists(file_path):
            issues.append(f"Arquivo essencial n√£o encontrado: {file_path}")
    
    if issues:
        print("‚ùå Problemas identificados:")
        for issue in issues:
            print(f"  - {issue}")
    else:
        print("‚úÖ Nenhum problema cr√≠tico identificado")
    
    return issues

def main():
    """Fun√ß√£o principal de an√°lise."""
    print("üîç AN√ÅLISE COMPLETA DO MODELO ECG")
    print("=" * 50)
    
    # Mudar para o diret√≥rio do projeto
    os.chdir(project_root)
    
    # 1. Identificar problemas gerais
    issues = identify_issues()
    
    # 2. Testar carregamento do modelo
    model_loaded, model_data = test_model_loading()
    
    if model_loaded:
        model, model_path = model_data
        
        # 3. Analisar arquitetura
        analyze_model_architecture(model)
        
        # 4. Testar predi√ß√£o
        test_model_prediction(model)
    
    # 5. Analisar metadados
    analyze_model_metadata()
    
    # 6. Verificar pr√©-processamento
    check_preprocessing_functions()
    
    print("\n" + "=" * 50)
    print("üèÅ AN√ÅLISE CONCLU√çDA")
    
    if issues:
        print(f"‚ö†Ô∏è {len(issues)} problema(s) identificado(s)")
        return False
    else:
        print("‚úÖ Sistema aparenta estar funcionando corretamente")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

